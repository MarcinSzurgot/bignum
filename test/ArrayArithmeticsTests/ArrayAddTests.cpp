#include <gtest/gtest.h>

#include <bignum/ArrayArithmetics/ArraySubAdd.hpp>

#include <vector>

#include "../Utils.hpp"

class ArrayAdditionTest : public ::testing::TestWithParam<BinaryOpParams> {};

TEST_P(ArrayAdditionTest, AdditionOperation) {
    auto num1 = GetParam().lhs;
    const auto num2 = GetParam().rhs;
    const auto expected = GetParam().expected;

    if (size(num1) < size(num2)) {
        num1.resize(size(num2));
    }

    const auto carry = bignum::add(
        std::span(num1),
        std::span(num2)
    );

    if (carry) {
        num1.push_back(1);
    }

    ASSERT_EQ(num1, expected);
}

INSTANTIATE_TEST_SUITE_P(
    ArrayAdditionTestParams,
    ArrayAdditionTest,
    ::testing::Values(
        BinaryOpParams({0xFFFFFFFF}, {0x0}, {0xFFFFFFFF}),
        BinaryOpParams({0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}, {0x1}, {0x0, 0x0, 0x0, 0x1}),
        BinaryOpParams({0x0}, {0x0}, {0x0}),
        BinaryOpParams({0x1, 0x2, 0x3}, {0x0}, {0x1, 0x2, 0x3}),
        BinaryOpParams({0xFFFFFFFF, 0x0, 0x0}, {0x2}, {0x1, 0x1, 0x0}),
        BinaryOpParams({0xFFFFFFFF, 0x0, 0xFFFFFFFF}, {0x1}, {0x0, 0x1, 0xFFFFFFFF}),
        BinaryOpParams({0xF, 0xF}, {0xF, 0xF}, {0x1E, 0x1E}),
        BinaryOpParams({0xFFFFFFFF, 0xFFFFFFFF}, {0xFFFFFFFF}, {0xFFFFFFFE, 0x0, 0x1}),
        BinaryOpParams({0xFFFFFFFF, 0x0, 0x0, 0x0}, {0x1}, {0x0, 0x1, 0x0, 0x0}),
        BinaryOpParams({0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}, {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}, {0xFFFFFFFE, 0xFFFFFFFF, 0xFFFFFFFF, 0x1}),
        BinaryOpParams({0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x1}, {0x1, 0x0, 0x0, 0x0, 0x0, 0x0}),
        BinaryOpParams({0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}, {0x1}, {0x0, 0x0, 0x0, 0x0, 0x1}),
        BinaryOpParams({0x1}, {0xFFFFFFFF}, {0x0, 0x1}),
        BinaryOpParams({0x1, 0xFFFFFFFF, 0x1}, {0x0, 0x1, 0x0}, {0x1, 0x0, 0x2}),
        BinaryOpParams({0xFFFFFFFF, 0xFFFFFFFF}, {0xFFFFFFFF, 0xFFFFFFFF, 0x1}, {0xFFFFFFFE, 0xFFFFFFFF, 0x2}),
        BinaryOpParams({0x0, 0x1}, {0x0, 0xFFFFFFFF}, {0x0, 0x0, 0x1}),
        BinaryOpParams({0xFFFFFFFE}, {0xFFFFFFFE}, {0xFFFFFFFC, 0x1}),
        BinaryOpParams({0x1}, {0x1}, {0x2}),
        BinaryOpParams({0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}, {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}, {0xFFFFFFFE, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x1}),
        BinaryOpParams({0xFFFFFFFF}, {0x1}, {0x0, 0x1})
    )
);